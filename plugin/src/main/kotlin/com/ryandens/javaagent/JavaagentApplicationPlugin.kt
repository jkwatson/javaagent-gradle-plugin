/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.ryandens.javaagent

import org.gradle.api.Project
import org.gradle.api.Plugin
import org.gradle.api.distribution.DistributionContainer
import org.gradle.api.distribution.plugins.DistributionPlugin
import org.gradle.api.plugins.ApplicationPlugin
import org.gradle.api.tasks.JavaExec
import org.gradle.api.tasks.application.CreateStartScripts
import java.io.File

/**
 * A simple 'hello world' plugin.
 */
class JavaagentApplicationPlugin: Plugin<Project> {
    override fun apply(project: Project) {
        // apply base plugin
        project.pluginManager.apply(JavaagentBasePlugin::class.java)
        // get configuration
        val javaagentConfiguration = project.configurations.named(JavaagentBasePlugin.CONFIGURATION_NAME)
        project.tasks.named(ApplicationPlugin.TASK_RUN_NAME, JavaExec::class.java).configure {
            it.jvmArgumentProviders.add {
                mutableListOf("-javaagent:${javaagentConfiguration.get().asPath}").plus(it.jvmArgs ?: mutableListOf())
            }
        }


        if (project.pluginManager.hasPlugin(ApplicationPlugin.APPLICATION_PLUGIN_NAME)) {
            project.tasks.named(ApplicationPlugin.TASK_START_SCRIPTS_NAME, CreateStartScripts::class.java) {
                it.defaultJvmOpts = listOf("-javaagent:COM_RYANDENS_APP_HOME_ENV_VAR_PLACEHOLDER/lib/${File(javaagentConfiguration.get().asPath).name}").plus(it.defaultJvmOpts ?: listOf())
                it.unixStartScriptGenerator = JavaagentAwareStartScriptGenerator()
            }
            project.extensions.getByType(DistributionContainer::class.java).named(DistributionPlugin.MAIN_DISTRIBUTION_NAME).configure { distribution ->
                distribution.contents { copy ->
                    copy.from(javaagentConfiguration) {
                        it.into("lib")
                    }
                }
            }
        }
    }
}
